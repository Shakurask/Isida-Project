global_config {
  default_context {
    array_class: "CudaCachedArray"
    device_id: "0"
    backends: "cudnn:float"
    backends: "cuda:float"
    backends: "cpu:float"
  }
}
training_config {
  max_epoch: 1000
  iter_per_epoch: 36
  save_best: true
  monitor_interval: 10
}
network {
  name: "Main"
  batch_size: 256
  variable {
    name: "Input"
    type: "Buffer"
    shape: { dim:-1 dim: 12 }
  }
  variable {
    name: "Affine/affine/W"
    type: "Parameter"
    shape: { dim: 12 dim: 256 }
    initializer {
      type: "NormalAffineGlorot"
      multiplier: 1
    }
  }
  variable {
    name: "Affine/affine/b"
    type: "Parameter"
    shape: { dim: 256 }
    initializer {
      type: "Constant"
      multiplier: 0
    }
  }
  variable {
    name: "Affine_2/affine/W"
    type: "Parameter"
    shape: { dim: 256 dim: 10 }
    initializer {
      type: "NormalAffineGlorot"
      multiplier: 1
    }
  }
  variable {
    name: "Affine_2/affine/b"
    type: "Parameter"
    shape: { dim: 10 }
    initializer {
      type: "Constant"
      multiplier: 0
    }
  }
  variable {
    name: "SquaredError_T"
    type: "Buffer"
    shape: { dim:-1 dim: 10 }
  }
  variable {
    name: "Affine"
    type: "Buffer"
    shape: { dim:-1 dim: 256 }
  }
  variable {
    name: "Sigmoid"
    type: "Buffer"
    shape: { dim:-1 dim: 256 }
  }
  variable {
    name: "Affine_2"
    type: "Buffer"
    shape: { dim:-1 dim: 10 }
  }
  variable {
    name: "Sigmoid_2"
    type: "Buffer"
    shape: { dim:-1 dim: 10 }
  }
  variable {
    name: "SquaredError"
    type: "Buffer"
    shape: { dim:-1 dim: 10 }
  }
  function {
    name: "Affine"
    type: "Affine"
    input: "Input"
    input: "Affine/affine/W"
    input: "Affine/affine/b"
    output: "Affine"
    affine_param {
      base_axis: 1
    }
  }
  function {
    name: "Sigmoid"
    type: "Sigmoid"
    input: "Affine"
    output: "Sigmoid"
  }
  function {
    name: "Affine_2"
    type: "Affine"
    input: "Sigmoid"
    input: "Affine_2/affine/W"
    input: "Affine_2/affine/b"
    output: "Affine_2"
    affine_param {
      base_axis: 1
    }
  }
  function {
    name: "Sigmoid_2"
    type: "Sigmoid"
    input: "Affine_2"
    output: "Sigmoid_2"
  }
  function {
    name: "SquaredError"
    type: "SquaredError"
    input: "Sigmoid_2"
    input: "SquaredError_T"
    output: "SquaredError"
  }
}
network {
  name: "MainValidation"
  batch_size: 256
  variable {
    name: "Input"
    type: "Buffer"
    shape: { dim:-1 dim: 12 }
  }
  variable {
    name: "Affine/affine/W"
    type: "Parameter"
    shape: { dim: 12 dim: 256 }
    initializer {
      type: "NormalAffineGlorot"
      multiplier: 1
    }
  }
  variable {
    name: "Affine/affine/b"
    type: "Parameter"
    shape: { dim: 256 }
    initializer {
      type: "Constant"
      multiplier: 0
    }
  }
  variable {
    name: "Affine_2/affine/W"
    type: "Parameter"
    shape: { dim: 256 dim: 10 }
    initializer {
      type: "NormalAffineGlorot"
      multiplier: 1
    }
  }
  variable {
    name: "Affine_2/affine/b"
    type: "Parameter"
    shape: { dim: 10 }
    initializer {
      type: "Constant"
      multiplier: 0
    }
  }
  variable {
    name: "SquaredError_T"
    type: "Buffer"
    shape: { dim:-1 dim: 10 }
  }
  variable {
    name: "Affine"
    type: "Buffer"
    shape: { dim:-1 dim: 256 }
  }
  variable {
    name: "Sigmoid"
    type: "Buffer"
    shape: { dim:-1 dim: 256 }
  }
  variable {
    name: "Affine_2"
    type: "Buffer"
    shape: { dim:-1 dim: 10 }
  }
  variable {
    name: "Sigmoid_2"
    type: "Buffer"
    shape: { dim:-1 dim: 10 }
  }
  variable {
    name: "SquaredError"
    type: "Buffer"
    shape: { dim:-1 dim: 10 }
  }
  function {
    name: "Affine"
    type: "Affine"
    input: "Input"
    input: "Affine/affine/W"
    input: "Affine/affine/b"
    output: "Affine"
    affine_param {
      base_axis: 1
    }
  }
  function {
    name: "Sigmoid"
    type: "Sigmoid"
    input: "Affine"
    output: "Sigmoid"
  }
  function {
    name: "Affine_2"
    type: "Affine"
    input: "Sigmoid"
    input: "Affine_2/affine/W"
    input: "Affine_2/affine/b"
    output: "Affine_2"
    affine_param {
      base_axis: 1
    }
  }
  function {
    name: "Sigmoid_2"
    type: "Sigmoid"
    input: "Affine_2"
    output: "Sigmoid_2"
  }
  function {
    name: "SquaredError"
    type: "SquaredError"
    input: "Sigmoid_2"
    input: "SquaredError_T"
    output: "SquaredError"
  }
}
network {
  name: "MainRuntime"
  batch_size: 256
  variable {
    name: "Input"
    type: "Buffer"
    shape: { dim:-1 dim: 12 }
  }
  variable {
    name: "Affine/affine/W"
    type: "Parameter"
    shape: { dim: 12 dim: 256 }
    initializer {
      type: "NormalAffineGlorot"
      multiplier: 1
    }
  }
  variable {
    name: "Affine/affine/b"
    type: "Parameter"
    shape: { dim: 256 }
    initializer {
      type: "Constant"
      multiplier: 0
    }
  }
  variable {
    name: "Affine_2/affine/W"
    type: "Parameter"
    shape: { dim: 256 dim: 10 }
    initializer {
      type: "NormalAffineGlorot"
      multiplier: 1
    }
  }
  variable {
    name: "Affine_2/affine/b"
    type: "Parameter"
    shape: { dim: 10 }
    initializer {
      type: "Constant"
      multiplier: 0
    }
  }
  variable {
    name: "Affine"
    type: "Buffer"
    shape: { dim:-1 dim: 256 }
  }
  variable {
    name: "Sigmoid"
    type: "Buffer"
    shape: { dim:-1 dim: 256 }
  }
  variable {
    name: "Affine_2"
    type: "Buffer"
    shape: { dim:-1 dim: 10 }
  }
  variable {
    name: "Sigmoid_2"
    type: "Buffer"
    shape: { dim:-1 dim: 10 }
  }
  function {
    name: "Affine"
    type: "Affine"
    input: "Input"
    input: "Affine/affine/W"
    input: "Affine/affine/b"
    output: "Affine"
    affine_param {
      base_axis: 1
    }
  }
  function {
    name: "Sigmoid"
    type: "Sigmoid"
    input: "Affine"
    output: "Sigmoid"
  }
  function {
    name: "Affine_2"
    type: "Affine"
    input: "Sigmoid"
    input: "Affine_2/affine/W"
    input: "Affine_2/affine/b"
    output: "Affine_2"
    affine_param {
      base_axis: 1
    }
  }
  function {
    name: "Sigmoid_2"
    type: "Sigmoid"
    input: "Affine_2"
    output: "Sigmoid_2"
  }
}
dataset {
  name: "Training"
  uri: "C:\\ULTRA_CSV.csv"
  cache_dir: "C:\\ULTRA_CSV.cache"
  overwrite_cache: true
  create_cache_explicitly: true
  shuffle: true
  no_image_normalization: true
  batch_size: 256
}
dataset {
  name: "Validation"
  uri: "C:\\ULTRA_CSV.csv"
  cache_dir: "C:\\ULTRA_CSV.cache"
  overwrite_cache: true
  create_cache_explicitly: true
  shuffle: false
  no_image_normalization: true
  batch_size: 256
}
optimizer {
  start_iter: 0
  end_iter: 0
  name: "Optimizer"
  update_interval: 1
  network_name: "Main"
  dataset_name: "Training"
  solver {
    type: "AdamW"
    weight_decay: 0
    adamw_param {
      alpha: 0.001
      beta1: 0.9
      beta2: 0.999
      eps: 1e-08
      wd: 0.0001
    }
    lr_scheduler_type: "Exponential"
    exponential_scheduler_param {
      gamma: 1
      iter_interval: 1
    }
    lr_decay: 1
    lr_decay_interval: 1
    lr_warmup_scheduler_type: "None"
  }
  data_variable {
    variable_name: "Input"
    data_name: "x"
  }
  data_variable {
    variable_name: "SquaredError_T"
    data_name: "p"
  }
  loss_variable {
    variable_name: "SquaredError"
  }
  parameter_variable {
    variable_name: "Affine/affine/W"
    learning_rate_multiplier: 1
  }
  parameter_variable {
    variable_name: "Affine/affine/b"
    learning_rate_multiplier: 1
  }
  parameter_variable {
    variable_name: "Affine_2/affine/W"
    learning_rate_multiplier: 1
  }
  parameter_variable {
    variable_name: "Affine_2/affine/b"
    learning_rate_multiplier: 1
  }
}
monitor {
  name: "train_error"
  network_name: "MainValidation"
  dataset_name: "Training"
  data_variable {
    variable_name: "Input"
    data_name: "x"
  }
  data_variable {
    variable_name: "SquaredError_T"
    data_name: "p"
  }
  monitor_variable {
    type: "Error"
    variable_name: "SquaredError"
  }
}
monitor {
  name: "valid_error"
  network_name: "MainValidation"
  dataset_name: "Validation"
  data_variable {
    variable_name: "Input"
    data_name: "x"
  }
  data_variable {
    variable_name: "SquaredError_T"
    data_name: "p"
  }
  monitor_variable {
    type: "Error"
    variable_name: "SquaredError"
  }
}
executor {
  name: "Executor"
  network_name: "MainRuntime"
  num_evaluations: 1
  repeat_evaluation_type: "mean"
  need_back_propagation: false
  no_image_normalization: true
  data_variable {
    variable_name: "Input"
    data_name: "x"
  }
  output_variable {
    variable_name: "Sigmoid_2"
    data_name: "p'"
  }
  parameter_variable {
    variable_name: "Affine/affine/W"
  }
  parameter_variable {
    variable_name: "Affine/affine/b"
  }
  parameter_variable {
    variable_name: "Affine_2/affine/W"
  }
  parameter_variable {
    variable_name: "Affine_2/affine/b"
  }
}
